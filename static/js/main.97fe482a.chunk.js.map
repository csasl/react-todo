{"version":3,"sources":["TodoItem.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","state","task","editing","completed","handleRemove","bind","handleEditRequest","handleUpdate","handleChange","handleComplete","this","removeTodo","id","setState","evt","preventDefault","editTodo","target","name","value","className","onSubmit","type","onChange","onClick","Component","NewTodoForm","handleSubmit","createTodo","uuidv4","placeholder","TodoList","todos","create","remove","edit","todo","filter","updatedTask","updatedTodos","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.97fe482a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './TodoItem.css';\r\n\r\nclass TodoItem extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            task: this.props.task,\r\n            editing: false,\r\n            completed: false,\r\n        }\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n        this.handleEditRequest = this.handleEditRequest.bind(this);\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleComplete = this.handleComplete.bind(this);\r\n    }\r\n\r\n    handleRemove() {\r\n        //call remove in parent component\r\n        this.props.removeTodo(this.props.id);\r\n    }\r\n\r\n    handleEditRequest(){\r\n        //toggle editing state\r\n        this.setState({editing: !this.state.editing});\r\n    }\r\n\r\n    handleUpdate(evt){\r\n        evt.preventDefault();\r\n        //call edit function in parent component\r\n        this.props.editTodo(this.state.task, this.props.id);\r\n        //reset editing state\r\n        this.setState({editing: false});\r\n    }\r\n\r\n    handleChange(evt){\r\n        this.setState({[evt.target.name]: evt.target.value });\r\n    }\r\n\r\n    handleComplete(){\r\n        this.setState({completed: ! this.state.completed});\r\n    }\r\n\r\n\r\n    render() {\r\n        \r\n        if(this.state.editing){\r\n            return (\r\n                <div className=\"Todo\">\r\n                    <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\r\n                        <input type=\"text\" \r\n                        value={this.state.task} \r\n                        name=\"task\"\r\n                        onChange={this.handleChange}/>\r\n                        <button>Save</button>\r\n                    </form>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"Todo\">\r\n                <li className={this.state.completed? \"TodoItem complete\": \"TodoItem\"} onClick={this.handleComplete}>{this.props.task}</li>\r\n                <div className=\"Todo-buttons\">\r\n                     <button onClick={this.handleRemove}><i className='fas fa-trash'></i></button>\r\n                     <button onClick={this.handleEditRequest}><i className='fas fa-pen'></i></button>\r\n                </div>\r\n                \r\n            </div> \r\n            );\r\n        }\r\n        \r\n           \r\n        }  \r\n      \r\n    \r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './NewTodoForm.css';\r\n\r\nclass NewTodoForm extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            task: \"\"\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(evt){\r\n        this.setState({[evt.target.name]: evt.target.value});\r\n    }\r\n\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n        //call function in parent component\r\n        this.props.createTodo({...this.state, id:uuidv4()}); \r\n        //reset form\r\n        this.setState({task: \"\"}); \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handleSubmit} className=\"NewTodoForm\">\r\n                    <input type=\"text\" placeholder=\"New todo\" name=\"task\" id=\"task\" value={this.state.task} onChange={this.handleChange}/>\r\n                    <button>Add todo</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewTodoForm;","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport NewTodoForm from './NewTodoForm';\r\nimport './TodoList.css';\r\n\r\nclass TodoList extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            todos: [],\r\n        };\r\n        this.create = this.create.bind(this);\r\n        this.remove = this.remove.bind(this);\r\n        this.edit = this.edit.bind(this);\r\n    }\r\n\r\n    create(todo){\r\n        //add new todo to todos\r\n        this.setState({todos: [...this.state.todos, todo]});\r\n    }\r\n\r\n    remove(id){\r\n        //find by id and remove\r\n        this.setState({\r\n            todos: this.state.todos.filter(todo => todo.id !== id)\r\n        });\r\n    }\r\n\r\n    edit(updatedTask, id){\r\n        //find todo by id and update task if found\r\n       const updatedTodos = this.state.todos.map(todo=>{\r\n           if(todo.id === id){\r\n               return {...todo, task:updatedTask}\r\n           }\r\n           return todo;\r\n       });\r\n       this.setState({todos: updatedTodos});\r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n        //show list of TodoItems\r\n        const todos = this.state.todos.map(todo=> {\r\n            return<TodoItem task= {todo.task} \r\n                            id={todo.id} \r\n                            key={todo.id}\r\n                            removeTodo={this.remove}\r\n                            editTodo = {this.edit}\r\n                            />\r\n        });\r\n\r\n        return(\r\n            <div className=\"TodoList\">\r\n                <h1>\r\n                    Todo List <span>A Simple React Todo List App</span>\r\n                    </h1>               \r\n                <ul>\r\n                    {todos}\r\n                 </ul>\r\n                 <NewTodoForm createTodo={this.create}/>\r\n            </div>\r\n            \r\n        )\r\n       \r\n    }\r\n}\r\n\r\nexport default TodoList;","import React, { Component } from 'react';\nimport TodoList from './TodoList';\nimport './App.css';\n\nclass App extends Component{\n  render(){\n    return(\n      <div className=\"App\">\n         <TodoList/>\n      </div>\n    );\n     \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}